{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\proyecto la pergoliana\\\\proyecto-la-pergoliana-2\\\\src\\\\components\\\\ItemListContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ItemList } from './ItemList';\nimport { data } from '../assets/data';\n/* import de useParams para traer el parametro de la URL */\n\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ItemListContainer = _ref => {\n  _s();\n\n  let {\n    greeting\n  } = _ref;\n  const [items, setItems] = useState([]);\n  /* para ponerle un loader */\n\n  const [loading, setLoading] = useState(true);\n  /* aca desestructuramos lo que trae useParams. el nombre es lo mismo que pusimos nosotros en la URL como parametro */\n\n  const {\n    catId\n  } = useParams();\n  useEffect(() => {\n    /* ponemos el loader como true para que muestre el \"CARGANDO\" cada vez que se re-renderiza*/\n    setLoading(true);\n    const getItems = new Promise(resolve => {\n      setTimeout(() => {\n        /* aca filtramos por categoria usando un ternario. si catId tiene datos filtra, sino trae todos los productos del array */\n        const myData = catId ? data.filter(item => item.category === catId) : data;\n        resolve(myData);\n      }, 1000);\n    });\n    getItems.then(res => {\n      setItems(res);\n    }).finally(() => setLoading(false));\n  }, [catId]);\n  /* aca usamos renderizado condicional para mostrar el loader o nuestros productos */\n\n  return loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"CARGANDO...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: greeting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ItemList, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ItemListContainer, \"CVO/VU9zxkvRGsIHJekL4Jd/rZI=\", false, function () {\n  return [useParams];\n});\n\n_c = ItemListContainer;\nexport default ItemListContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemListContainer\");","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/proyecto la pergoliana/proyecto-la-pergoliana-2/src/components/ItemListContainer.js"],"names":["React","useState","useEffect","ItemList","data","useParams","ItemListContainer","greeting","items","setItems","loading","setLoading","catId","getItems","Promise","resolve","setTimeout","myData","filter","item","category","then","res","finally","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA;;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;;AAEA,MAAMC,iBAAiB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEA;;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEA;;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAYP,SAAS,EAA3B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACAS,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAME,QAAQ,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACxCC,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,cAAMC,MAAM,GAAGL,KAAK,GAChBR,IAAI,CAACc,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkBR,KAAxC,CADgB,GAEhBR,IAFJ;AAIAW,QAAAA,OAAO,CAACE,MAAD,CAAP;AACD,OAPS,EAOP,IAPO,CAAV;AAQD,KATgB,CAAjB;AAWAJ,IAAAA,QAAQ,CACLQ,IADH,CACSC,GAAD,IAAS;AACbb,MAAAA,QAAQ,CAACa,GAAD,CAAR;AACD,KAHH,EAIGC,OAJH,CAIW,MAAMZ,UAAU,CAAC,KAAD,CAJ3B;AAKD,GAnBQ,EAmBN,CAACC,KAAD,CAnBM,CAAT;AAqBA;;AACA,SAAOF,OAAO,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADY,gBAGZ;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAAEc,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA,gBAAqCjB;AAArC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEC;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBAHF;AAQD,CAvCD;;GAAMF,iB;UAOcD,S;;;KAPdC,iB;AAwCN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ItemList } from './ItemList';\r\nimport { data } from '../assets/data';\r\n\r\n/* import de useParams para traer el parametro de la URL */\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ItemListContainer = ({ greeting }) => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  /* para ponerle un loader */\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  /* aca desestructuramos lo que trae useParams. el nombre es lo mismo que pusimos nosotros en la URL como parametro */\r\n  const { catId } = useParams();\r\n\r\n  useEffect(() => {\r\n    /* ponemos el loader como true para que muestre el \"CARGANDO\" cada vez que se re-renderiza*/\r\n    setLoading(true);\r\n    const getItems = new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        /* aca filtramos por categoria usando un ternario. si catId tiene datos filtra, sino trae todos los productos del array */\r\n        const myData = catId\r\n          ? data.filter((item) => item.category === catId)\r\n          : data;\r\n\r\n        resolve(myData);\r\n      }, 1000);\r\n    });\r\n\r\n    getItems\r\n      .then((res) => {\r\n        setItems(res);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [catId]);\r\n\r\n  /* aca usamos renderizado condicional para mostrar el loader o nuestros productos */\r\n  return loading ? (\r\n    <h2>CARGANDO...</h2>\r\n  ) : (\r\n    <>\r\n      <h3 style={{ textAlign: 'center' }}>{greeting}</h3>\r\n      <ItemList items={items} />\r\n    </>\r\n  );\r\n};\r\nexport default ItemListContainer;"]},"metadata":{},"sourceType":"module"}